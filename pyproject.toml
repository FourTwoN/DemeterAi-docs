[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "demeterai-backend"
version = "2.0.0"
description = "DemeterAI v2.0 - Automated plant counting backend"
requires-python = ">=3.12"

dependencies = [
    "fastapi",
    "uvicorn[standard]",
    "pydantic",
    "pydantic-settings",
    "sqlalchemy",
    "asyncpg",
    "alembic",
    "celery",
    "redis",
    "ultralytics",
    "opencv-python-headless",
    "pillow",
    "torch",
    "sahi",
    "boto3",
    "python-jose[cryptography]",
    "passlib[bcrypt]",
    "pybreaker",
    "python-multipart",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "httpx",
    "aiosqlite",
    "ruff",
    "mypy",
    "types-requests",
    "types-redis",
    "types-python-dateutil",
]

[tool.ruff]
line-length = 100
target-version = "py312"

exclude = [
    ".git",
    ".venv",
    "venv",
    "alembic/versions/*.py",
    "__pycache__",
    "build",
    "dist",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache"
]

[tool.ruff.lint]
# Enable rule sets:
# E: pycodestyle errors
# F: Pyflakes
# I: isort
# N: pep8-naming
# W: pycodestyle warnings
# UP: pyupgrade
# B: flake8-bugbear
# C4: flake8-comprehensions
# SIM: flake8-simplify
select = ["E", "F", "I", "N", "W", "UP", "B", "C4", "SIM"]

ignore = [
    "E501", # Line too long (let formatter handle)
    "B008", # Do not perform function call in argument defaults
    "C901", # Function is too complex (let developers judge)
    "E712", # Comparison to True/False (SQLAlchemy uses this)
    "N818", # Exception naming: AppBaseException is intentional (not AppBaseError)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports OK in __init__.py
"alembic/env.py" = ["F401", "E402"]  # Alembic imports
"app/db/base.py" = ["E402"]  # Model imports after Base definition
"tests/**/*.py" = ["S101", "F841", "B007"]  # Allow assert, unused vars (side effects), loop vars in tests

[tool.ruff.lint.isort]
known-first-party = ["app"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.setuptools.packages.find]
include = ["app*"]
exclude = ["tests*", "docs*", "flows*", "guides*", "context*", "backlog*", "database*", "researchs*", "geolocalization*", "engineering_plan*"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80"
]
markers = [
    "unit: Unit tests (fast, isolated, mocked dependencies)",
    "integration: Integration tests (slower, real dependencies)",
    "slow: Slow tests (skip with -m 'not slow')",
    "benchmark: Performance benchmark tests (skip with -m 'not benchmark')",
    "celery: Celery task tests (requires Redis and Celery workers)"
]

[tool.mypy]
python_version = "3.12"
strict = true

# Error reporting
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true

# Type checking behavior
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# Strict mode options
no_implicit_optional = true
strict_equality = true
strict_concatenate = true

# SQLAlchemy support
plugins = ["sqlalchemy.ext.mypy.plugin"]

# Incremental caching
incremental = true
cache_dir = ".mypy_cache"

# Exclude auto-generated code
[[tool.mypy.overrides]]
module = "alembic.versions.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "alembic.env"
ignore_errors = true

# Ignore missing imports for GeoAlchemy2 and Shapely (no type stubs)
[[tool.mypy.overrides]]
module = "geoalchemy2.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "shapely.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "app.models.storage_area"
ignore_missing_imports = true  # Forward declaration, will be created in DB002

# Relax strict mode for tests
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
check_untyped_defs = false

# Ignore integration tests completely (not yet executable)
[[tool.mypy.overrides]]
module = "tests.integration.*"
ignore_errors = true
