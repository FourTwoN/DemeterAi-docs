[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "demeterai-backend"
version = "2.0.0"
description = "DemeterAI v2.0 - Automated plant counting backend"
requires-python = ">=3.12"

dependencies = [
    "fastapi==0.118.2",
    "uvicorn[standard]==0.34.0",
    "pydantic==2.10.0",
    "pydantic-settings==2.6.0",
    "sqlalchemy==2.0.43",
    "asyncpg==0.30.0",
    "alembic==1.14.0",
    "celery==5.4.0",
    "redis==5.2.0",
    "ultralytics==8.3.0",
    "opencv-python-headless==4.10.0.84",
    "pillow==11.0.0",
    "torch==2.4.0",
    "sahi==0.11.18",
    "boto3==1.35.0",
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    "pybreaker==1.4.1",
]

[project.optional-dependencies]
dev = [
    "pytest==8.3.0",
    "pytest-asyncio==0.24.0",
    "pytest-cov==6.0.0",
    "pytest-mock==3.14.0",
    "httpx==0.27.0",
    "ruff==0.7.0",
    "mypy==1.13.0",
]

[tool.ruff]
line-length = 100
target-version = "py312"

exclude = [
    ".git",
    ".venv",
    "venv",
    "alembic/versions/*.py",
    "__pycache__",
    "build",
    "dist",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache"
]

[tool.ruff.lint]
# Enable rule sets:
# E: pycodestyle errors
# F: Pyflakes
# I: isort
# N: pep8-naming
# W: pycodestyle warnings
# UP: pyupgrade
# B: flake8-bugbear
# C4: flake8-comprehensions
# SIM: flake8-simplify
select = ["E", "F", "I", "N", "W", "UP", "B", "C4", "SIM"]

ignore = [
    "E501",    # Line too long (let formatter handle)
    "B008",    # Do not perform function call in argument defaults
    "C901",    # Function is too complex (let developers judge)
    "E712",    # Comparison to True/False (SQLAlchemy uses this)
    "N818",    # Exception naming: AppBaseException is intentional (not AppBaseError)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports OK in __init__.py
"alembic/env.py" = ["F401", "E402"]  # Alembic imports
"tests/**/*.py" = ["S101", "F841", "B007"]  # Allow assert, unused vars (side effects), loop vars in tests

[tool.ruff.lint.isort]
known-first-party = ["app"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.setuptools.packages.find]
include = ["app*"]
exclude = ["tests*", "docs*", "flows*", "guides*", "context*", "backlog*", "database*", "researchs*", "geolocalization*", "engineering_plan*"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "--cov=app --cov-report=html --cov-report=term"
