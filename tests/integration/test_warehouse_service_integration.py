"""Integration tests for WarehouseService with real PostgreSQL database.

Tests full service workflow with real database operations:
- PostGIS spatial queries
- Geometry validation
- Transaction management
- Schema transformations

Requires:
    - PostgreSQL test database with PostGIS extension
    - docker-compose up db_test -d

Coverage:
    - Full lifecycle: create → read → update → delete
    - GPS-based lookups with real PostGIS queries
    - Geometry validation with real database constraints
    - Soft delete verification

See:
    - Service: app/services/warehouse_service.py
    - Task: backlog/03_kanban/01_ready/S001-warehouse-service.md
"""

import pytest

from app.core.exceptions import (
    DuplicateCodeException,
    WarehouseNotFoundException,
)
from app.models.warehouse import WarehouseTypeEnum
from app.repositories.warehouse_repository import WarehouseRepository
from app.schemas.warehouse_schema import (
    WarehouseCreateRequest,
    WarehouseUpdateRequest,
)
from app.services.warehouse_service import WarehouseService

# ============================================================================
# Fixtures
# ============================================================================


@pytest.fixture
def warehouse_service(db_session):
    """Create WarehouseService with real repository."""
    repo = WarehouseRepository(db_session)
    return WarehouseService(repo)


@pytest.fixture
def sample_geojson():
    """Valid GeoJSON polygon for Chilean greenhouse coordinates."""
    return {
        "type": "Polygon",
        "coordinates": [
            [
                [-70.648300, -33.448900],  # SW corner
                [-70.647300, -33.448900],  # SE corner
                [-70.647300, -33.449900],  # NE corner
                [-70.648300, -33.449900],  # NW corner
                [-70.648300, -33.448900],  # Close polygon
            ]
        ],
    }


# ============================================================================
# Full Lifecycle Tests
# ============================================================================


@pytest.mark.asyncio
async def test_warehouse_service_full_lifecycle(warehouse_service, db_session, sample_geojson):
    """Test complete warehouse lifecycle: create → read → update → delete.

    This integration test verifies:
    - Warehouse creation with PostGIS geometry
    - GPS-based lookup with real ST_Contains query
    - Partial update with geometry change
    - Soft delete (active=False)
    - Database state verification
    """
    # CREATE
    create_request = WarehouseCreateRequest(
        code="INT-GH-001",
        name="Integration Test Greenhouse",
        warehouse_type=WarehouseTypeEnum.GREENHOUSE,
        geojson_geojson_coordinates=sample_geojson,
        active=True,
    )

    created = await warehouse_service.create_warehouse(create_request)

    assert created.warehouse_id is not None
    assert created.code == "INT-GH-001"
    assert created.name == "Integration Test Greenhouse"
    assert created.warehouse_type == "greenhouse"
    assert created.active is True
    assert created.geojson_coordinates["type"] == "Polygon"
    assert created.centroid is None  # Centroid generated by trigger (may be None initially)
    assert created.area_m2 is None or created.area_m2 > 0  # Generated column

    await db_session.commit()  # Persist for GPS lookup

    # READ BY GPS (point inside polygon)
    warehouse = await warehouse_service.get_warehouse_by_gps(-70.6478, -33.4494)

    assert warehouse is not None
    assert warehouse.warehouse_id == created.warehouse_id
    assert warehouse.code == "INT-GH-001"

    # READ BY ID
    warehouse_by_id = await warehouse_service.get_warehouse_by_id(created.warehouse_id)

    assert warehouse_by_id.warehouse_id == created.warehouse_id
    assert warehouse_by_id.code == "INT-GH-001"

    # UPDATE (partial update - name only)
    update_request = WarehouseUpdateRequest(name="Updated Integration Test Greenhouse")

    updated = await warehouse_service.update_warehouse(created.warehouse_id, update_request)

    assert updated.warehouse_id == created.warehouse_id
    assert updated.name == "Updated Integration Test Greenhouse"
    assert updated.code == "INT-GH-001"  # Unchanged

    await db_session.commit()

    # UPDATE (geometry change)
    new_geojson = {
        "type": "Polygon",
        "coordinates": [
            [
                [-70.650000, -33.450000],
                [-70.649000, -33.450000],
                [-70.649000, -33.451000],
                [-70.650000, -33.451000],
                [-70.650000, -33.450000],
            ]
        ],
    }

    geometry_update_request = WarehouseUpdateRequest(geojson_geojson_coordinates=new_geojson)

    updated_geometry = await warehouse_service.update_warehouse(
        created.warehouse_id, geometry_update_request
    )

    assert updated_geometry.geojson_coordinates["type"] == "Polygon"
    # Note: Coordinates may be transformed by PostGIS

    await db_session.commit()

    # DELETE (soft delete)
    deleted = await warehouse_service.delete_warehouse(created.warehouse_id)

    assert deleted is True

    await db_session.commit()

    # VERIFY SOFT DELETE
    active_warehouses = await warehouse_service.get_active_warehouses()

    assert not any(wh.warehouse_id == created.warehouse_id for wh in active_warehouses)

    # Warehouse still exists in database (soft delete)
    warehouse_still_exists = await warehouse_service.get_warehouse_by_id(created.warehouse_id)
    assert warehouse_still_exists.active is False


# ============================================================================
# GPS Lookup Tests
# ============================================================================


@pytest.mark.asyncio
async def test_gps_lookup_point_inside_polygon(warehouse_service, db_session, sample_geojson):
    """Test GPS lookup finds warehouse when point is inside polygon."""
    # Create warehouse
    create_request = WarehouseCreateRequest(
        code="GPS-TEST-001",
        name="GPS Test Warehouse",
        warehouse_type=WarehouseTypeEnum.GREENHOUSE,
        geojson_geojson_coordinates=sample_geojson,
    )

    created = await warehouse_service.create_warehouse(create_request)
    await db_session.commit()

    # Point inside polygon (center)
    warehouse = await warehouse_service.get_warehouse_by_gps(-70.6478, -33.4494)

    assert warehouse is not None
    assert warehouse.warehouse_id == created.warehouse_id


@pytest.mark.asyncio
async def test_gps_lookup_point_outside_polygon(warehouse_service, db_session, sample_geojson):
    """Test GPS lookup returns None when point is outside all polygons."""
    # Create warehouse
    create_request = WarehouseCreateRequest(
        code="GPS-TEST-002",
        name="GPS Test Warehouse 2",
        warehouse_type=WarehouseTypeEnum.GREENHOUSE,
        geojson_geojson_coordinates=sample_geojson,
    )

    await warehouse_service.create_warehouse(create_request)
    await db_session.commit()

    # Point outside polygon
    warehouse = await warehouse_service.get_warehouse_by_gps(-75.0, -35.0)

    assert warehouse is None


# ============================================================================
# Validation Tests
# ============================================================================


@pytest.mark.asyncio
async def test_duplicate_code_rejection(warehouse_service, db_session, sample_geojson):
    """Test duplicate warehouse code is rejected."""
    # Create first warehouse
    create_request_1 = WarehouseCreateRequest(
        code="DUP-001",
        name="First Warehouse",
        warehouse_type=WarehouseTypeEnum.GREENHOUSE,
        geojson_geojson_coordinates=sample_geojson,
    )

    await warehouse_service.create_warehouse(create_request_1)
    await db_session.commit()

    # Attempt to create duplicate code
    create_request_2 = WarehouseCreateRequest(
        code="DUP-001",  # Same code
        name="Second Warehouse",
        warehouse_type=WarehouseTypeEnum.SHADEHOUSE,
        geojson_geojson_coordinates=sample_geojson,
    )

    with pytest.raises(DuplicateCodeException) as exc_info:
        await warehouse_service.create_warehouse(create_request_2)

    assert "DUP-001" in str(exc_info.value)


@pytest.mark.asyncio
async def test_invalid_geometry_rejected(warehouse_service, db_session):
    """Test invalid polygon geometry is rejected before database insert."""
    # Polygon with only 2 unique points (triangle needs at least 3 unique points + 1 closing)
    # This will fail the "at least 3 vertices" check (needs 4 total with closing point)
    invalid_geojson = {
        "type": "Polygon",
        "coordinates": [
            [
                [-70.648300, -33.448900],
                [-70.647300, -33.448900],
                [-70.648300, -33.448900],  # Only 2 unique vertices, closes back to first
            ]
        ],
    }

    create_request = WarehouseCreateRequest(
        code="INVALID-001",
        name="Invalid Warehouse",
        warehouse_type=WarehouseTypeEnum.GREENHOUSE,
        geojson_geojson_coordinates=invalid_geojson,
    )

    with pytest.raises(ValueError, match="(at least 3 vertices|Too few points)"):
        await warehouse_service.create_warehouse(create_request)


# ============================================================================
# Not Found Tests
# ============================================================================


@pytest.mark.asyncio
async def test_get_warehouse_by_id_not_found(warehouse_service):
    """Test WarehouseNotFoundException when ID doesn't exist."""
    with pytest.raises(WarehouseNotFoundException) as exc_info:
        await warehouse_service.get_warehouse_by_id(999999)

    assert "999999" in str(exc_info.value)


@pytest.mark.asyncio
async def test_update_warehouse_not_found(warehouse_service):
    """Test update raises WarehouseNotFoundException when ID doesn't exist."""
    update_request = WarehouseUpdateRequest(name="New Name")

    with pytest.raises(WarehouseNotFoundException) as exc_info:
        await warehouse_service.update_warehouse(999999, update_request)

    assert "999999" in str(exc_info.value)


@pytest.mark.asyncio
async def test_delete_warehouse_not_found(warehouse_service):
    """Test delete raises WarehouseNotFoundException when ID doesn't exist."""
    with pytest.raises(WarehouseNotFoundException) as exc_info:
        await warehouse_service.delete_warehouse(999999)

    assert "999999" in str(exc_info.value)


# ============================================================================
# Active Warehouses Tests
# ============================================================================


@pytest.mark.asyncio
async def test_get_active_warehouses_filters_inactive(
    warehouse_service, db_session, sample_geojson
):
    """Test get_active_warehouses returns only active warehouses."""
    # Create active warehouse
    active_request = WarehouseCreateRequest(
        code="ACTIVE-001",
        name="Active Warehouse",
        warehouse_type=WarehouseTypeEnum.GREENHOUSE,
        geojson_geojson_coordinates=sample_geojson,
        active=True,
    )

    active = await warehouse_service.create_warehouse(active_request)
    await db_session.commit()

    # Create and delete warehouse (inactive)
    inactive_request = WarehouseCreateRequest(
        code="INACTIVE-001",
        name="Inactive Warehouse",
        warehouse_type=WarehouseTypeEnum.GREENHOUSE,
        geojson_geojson_coordinates=sample_geojson,
        active=True,
    )

    inactive = await warehouse_service.create_warehouse(inactive_request)
    await db_session.commit()

    await warehouse_service.delete_warehouse(inactive.warehouse_id)
    await db_session.commit()

    # Get active warehouses
    active_warehouses = await warehouse_service.get_active_warehouses()

    active_ids = [wh.warehouse_id for wh in active_warehouses]

    assert active.warehouse_id in active_ids
    assert inactive.warehouse_id not in active_ids


# ============================================================================
# Geometry Validation Edge Cases
# ============================================================================


@pytest.mark.asyncio
async def test_polygon_with_minimum_vertices(warehouse_service, db_session):
    """Test polygon with exactly 3 vertices (minimum) is accepted."""
    # Triangle (minimum valid polygon)
    triangle_geojson = {
        "type": "Polygon",
        "coordinates": [
            [
                [-70.648, -33.449],
                [-70.647, -33.449],
                [-70.648, -33.450],
                [-70.648, -33.449],  # Close
            ]
        ],
    }

    create_request = WarehouseCreateRequest(
        code="TRIANGLE-001",
        name="Triangle Warehouse",
        warehouse_type=WarehouseTypeEnum.OPEN_FIELD,
        geojson_geojson_coordinates=triangle_geojson,
    )

    created = await warehouse_service.create_warehouse(create_request)
    await db_session.commit()

    assert created.warehouse_id is not None
    assert created.code == "TRIANGLE-001"


@pytest.mark.asyncio
async def test_complex_polygon_with_many_vertices(warehouse_service, db_session):
    """Test polygon with many vertices (complex boundary) is accepted."""
    # Octagon (8 vertices)
    octagon_geojson = {
        "type": "Polygon",
        "coordinates": [
            [
                [-70.6483, -33.4489],
                [-70.6480, -33.4488],
                [-70.6477, -33.4488],
                [-70.6474, -33.4489],
                [-70.6473, -33.4492],
                [-70.6474, -33.4495],
                [-70.6477, -33.4496],
                [-70.6480, -33.4496],
                [-70.6483, -33.4495],
                [-70.6483, -33.4489],  # Close
            ]
        ],
    }

    create_request = WarehouseCreateRequest(
        code="OCTAGON-001",
        name="Octagon Warehouse",
        warehouse_type=WarehouseTypeEnum.TUNNEL,
        geojson_geojson_coordinates=octagon_geojson,
    )

    created = await warehouse_service.create_warehouse(create_request)
    await db_session.commit()

    assert created.warehouse_id is not None
    assert created.code == "OCTAGON-001"
