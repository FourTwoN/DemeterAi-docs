name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.8.2"

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort

      - name: Run ruff linter
        run: |
          ruff check app/ tests/ --output-format=github
        continue-on-error: false

      - name: Run ruff formatter check
        run: |
          ruff format --check app/ tests/
        continue-on-error: false

      - name: Run black formatter check
        run: |
          black --check app/ tests/ --line-length 88
        continue-on-error: false

      - name: Run isort import check
        run: |
          isort --check-only app/ tests/ --profile black
        continue-on-error: false

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install mypy

      - name: Run mypy type checker
        run: |
          mypy app/ --install-types --non-interactive --ignore-missing-imports \
            --show-error-codes --show-column-numbers --pretty

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run bandit security linter
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ -ll -f screen
        continue-on-error: true

      - name: Run safety dependency checker
        run: |
          pip install -r requirements.txt
          safety check --json > safety-report.json || true
          safety check
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: demeter_test
          POSTGRES_PASSWORD: demeter_test_pass
          POSTGRES_DB: demeterai_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql+asyncpg://demeter_test:demeter_test_pass@localhost:5432/demeterai_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "TESTING=true" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          alembic upgrade head
        env:
          DATABASE_URL: postgresql+asyncpg://demeter_test:demeter_test_pass@localhost:5432/demeterai_test

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --tb=short --cov=app --cov-report=term-missing:skip-covered

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short --cov=app --cov-append --cov-report=term-missing:skip-covered

      - name: Generate coverage report
        run: |
          pytest tests/ --cov=app --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=80

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.xml

      - name: Display coverage summary
        if: always()
        run: |
          echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          coverage report >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, type-check, security, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: demeterai:${{ github.sha }},demeterai:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Test Docker image
        run: |
          docker run --rm demeterai:${{ github.sha }} python --version
          docker run --rm demeterai:${{ github.sha }} pip list

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, type-check, security, test]
    if: always()
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.type-check.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ One or more required checks failed"
            exit 1
          fi
          echo "✅ All required checks passed"

      - name: Success summary
        if: success()
        run: |
          echo "### ✅ CI Pipeline Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All checks completed successfully:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Lint & Format" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Type Check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Tests & Coverage (≥80%)" >> $GITHUB_STEP_SUMMARY
