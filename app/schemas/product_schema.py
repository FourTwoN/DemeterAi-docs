"""Product Pydantic schemas (LEVEL 3 taxonomy - LEAF level)."""

from typing import TYPE_CHECKING, Any

from pydantic import BaseModel, ConfigDict, Field

if TYPE_CHECKING:
    from app.models.product import Product


class ProductCreateRequest(BaseModel):
    """Request schema for creating a product.

    Note: SKU is NOT provided in request - it's auto-generated by service.
    """

    family_id: int = Field(..., gt=0, description="Parent family ID (FK to product_families)")
    common_name: str = Field(..., min_length=1, max_length=200, description="Product common name")
    scientific_name: str | None = Field(
        None, max_length=200, description="Scientific name (optional)"
    )
    description: str | None = Field(None, description="Optional detailed description")
    custom_attributes: dict[str, Any] | None = Field(
        default_factory=dict,
        description="JSONB flexible metadata (color, variegation, growth_rate, etc.)",
    )


class ProductUpdateRequest(BaseModel):
    """Request schema for updating a product.

    Note: SKU and family_id are immutable (cannot be changed after creation).
    """

    common_name: str | None = Field(None, min_length=1, max_length=200)
    scientific_name: str | None = None
    description: str | None = None
    custom_attributes: dict[str, Any] | None = None


class ProductResponse(BaseModel):
    """Response schema for product."""

    product_id: int = Field(..., description="Product primary key (auto-generated)")
    family_id: int = Field(..., description="Parent family ID (FK to product_families)")
    sku: str = Field(..., description="Unique Stock Keeping Unit")
    common_name: str = Field(..., description="Human-readable product name")
    scientific_name: str | None = Field(None, description="Optional scientific name")
    description: str | None = Field(None, description="Optional detailed description")
    custom_attributes: dict[str, Any] = Field(default_factory=dict, description="JSONB metadata")

    model_config = ConfigDict(from_attributes=True)

    @classmethod
    def from_model(cls, product_model: "Product") -> "ProductResponse":
        """Create response from SQLAlchemy model."""
        return cls(
            product_id=product_model.product_id,  # type: ignore[arg-type]
            family_id=product_model.family_id,  # type: ignore[arg-type]
            sku=product_model.sku,  # type: ignore[arg-type]
            common_name=product_model.common_name,  # type: ignore[arg-type]
            scientific_name=product_model.scientific_name,
            description=product_model.description,
            custom_attributes=product_model.custom_attributes or {},
        )
