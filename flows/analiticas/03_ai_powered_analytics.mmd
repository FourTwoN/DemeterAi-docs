---
title: "03 - AI-Powered Analytics - Detailed Flow"
author: "DemeterAI Documentation Team"
date: "2025-10-08"
version: "1.0.0"
mermaid_version: "v11.3.0+"
description: "Ultra-detailed subflow: Natural language analytics with LLM, SQL generation, sandboxed execution"
parent_diagram: "00_comprehensive_view.mmd"
---

flowchart TB
%% =================================================================
%% DIAGRAM 03: AI-POWERED ANALYTICS
%% =================================================================
%%
%% PURPOSE:
%% Shows how users can ask natural language questions and receive
%% automated insights through LLM-powered SQL generation and
%% visualization.
%%
%% SECURITY CRITICAL:
%% - Read-only database access
%% - SQL validation and sanitization
%% - Python sandbox execution
%% - Rate limiting
%%
%% SCOPE: Natural language ‚Üí SQL ‚Üí Results ‚Üí Visualization ‚Üí Insights
%% PERFORMANCE TARGET: 2-5s per query
%% =================================================================
    START@{ shape: stadium, label: "ü§ñ User Navigates to AI Analytics
Route: /analytics/ai

UI shows:
‚Ä¢ Chat interface
‚Ä¢ Example questions
‚Ä¢ Schema overview
‚Ä¢ Query history

Examples displayed:
'Show mortality by cantero'
'Compare stock in nave 1 vs 2'

‚è±Ô∏è Page load: < 1s" }

INPUT_QUERY@{ shape: rect, label: "üí¨ User Types Question
Natural language input:
'Show me mortality rate
comparison between
nave 1 and nave 2'

UI features:
‚Ä¢ Auto-complete suggestions
‚Ä¢ Previous query history
‚Ä¢ Clear button
‚Ä¢ Submit on Enter

Min length: 10 chars
Max length: 500 chars" }

VALIDATE_INPUT@{ shape: diamond, label: "Input Valid?
Checks:
‚Ä¢ Length: 10-500 chars
‚Ä¢ Not empty
‚Ä¢ No SQL injection attempts
‚Ä¢ Not offensive content

‚è±Ô∏è ~5ms" }

INPUT_ERROR@{ shape: rect, label: "‚ùå Invalid Input
Show error:
'Please enter a question
(10-500 characters)'

Highlight input field red" }

SUBMIT_QUERY@{ shape: rect, label: "üöÄ Submit Query
POST /api/analytics/ai-query
{
'question': 'Show mortality...',
'user_id': UUID,
'context': {
'warehouses': [...],
'date': '2025-10-08'
}
}

Show loading:
‚Ä¢ Spinner
‚Ä¢ 'AI is thinking...'

‚è±Ô∏è ~10ms sending" }

%% =================================================================
%% BACKEND PROCESSING
%% =================================================================

CHECK_RATE_LIMIT@{ shape: diamond, label: "Rate Limit OK?
Redis check:
Key: rate_limit:{user_id}

Limits:
‚Ä¢ 10 per minute
‚Ä¢ 100 per hour
‚Ä¢ 1000 per day

‚è±Ô∏è ~10ms" }

RATE_LIMITED@{ shape: rect, label: "‚ö†Ô∏è Rate Limit Exceeded
Return 429:
{
'error': 'Too many requests',
'retry_after': 60,
'limit': '10 per minute'
}

Frontend shows countdown" }

CHECK_CACHE@{ shape: diamond, label: "Query Cached?
Key: ai_query:hash(question)
TTL: 3600s (1 hour)

Identical questions reuse
previous LLM response

‚è±Ô∏è ~10ms" }

CACHE_HIT@{ shape: rect, label: "‚úÖ Cache Hit
Return cached:
‚Ä¢ SQL query
‚Ä¢ Previous results
‚Ä¢ Visualization
‚Ä¢ Insights

Skip LLM call
Cost: $0

‚è±Ô∏è ~50ms total" }

%% =================================================================
%% LLM INTEGRATION
%% =================================================================

PREPARE_CONTEXT@{ shape: rect, label: "üìã Prepare LLM Context
Gather:
1. Database schema (curated)
2. Example queries
3. User context (role, warehouses)
4. Current date

Format system prompt:
'You are PostgreSQL expert...'

‚è±Ô∏è ~50ms" }

CALL_OPENAI@{ shape: subproc, label: "üß† Call OpenAI API
Endpoint: chat.completions.create
Model: gpt-4o
Temperature: 0.2

Messages:
[
{role: 'system', content: schema + rules},
{role: 'user', content: question}
]

Response format: JSON
{
'sql': 'SELECT...',
'explanation': '...',
'python_code': '...',
'insights': [...]
}

‚è±Ô∏è 1-3s
Cost: ~$0.01" }

LLM_SUCCESS@{ shape: diamond, label: "LLM Response OK?
Checks:
‚Ä¢ Valid JSON
‚Ä¢ 'sql' field present
‚Ä¢ Response < 2000 tokens

‚è±Ô∏è ~5ms" }

LLM_ERROR@{ shape: rect, label: "‚ùå LLM Error
Return 500:
{
'error': 'AI service unavailable',
'retry': true
}

Log error for debugging
Fallback: suggest manual filters" }

%% =================================================================
%% SQL VALIDATION
%% =================================================================

VALIDATE_SQL@{ shape: subproc, label: "üîí Validate Generated SQL
Multi-layer validation:

Layer 1: Regex blacklist
‚Ä¢ No DELETE/UPDATE/INSERT
‚Ä¢ No DROP/ALTER/GRANT
‚Ä¢ No multiple statements (;)

Layer 2: SQL Parser (sqlparse)
‚Ä¢ Parse AST
‚Ä¢ Check first token is SELECT
‚Ä¢ Verify single statement

Layer 3: Business rules
‚Ä¢ No UNION with dangerous queries
‚Ä¢ No subqueries with mutations

‚è±Ô∏è ~20ms" }

SQL_VALID@{ shape: diamond, label: "SQL Safe?
All validation layers passed?

If any fail:
Reject query" }

SQL_UNSAFE@{ shape: rect, label: "‚ùå Unsafe SQL Detected
Return 400:
{
'error': 'AI generated unsafe query',
'sql': '<redacted>',
'issue': 'Contains forbidden operation',
'action': 'Try rephrasing question'
}

Log incident for review
Consider fine-tuning LLM" }

%% =================================================================
%% QUERY EXECUTION
%% =================================================================

EXECUTE_SQL@{ shape: cyl, label: "Execute SQL (Read-Only User)
Database connection:
‚Ä¢ User: demeter_readonly
‚Ä¢ Privileges: SELECT only
‚Ä¢ Timeout: 30s
‚Ä¢ Max rows: 10,000

Query:
{generated_sql}

Example:
SELECT sa.name, COUNT(*)...
FROM stock_movements sm
WHERE movement_type = 'muerte'
GROUP BY sa.name

‚è±Ô∏è 100ms - 5s" }

QUERY_TIMEOUT@{ shape: diamond, label: "Query Completed?
Check:
‚Ä¢ Execution time < 30s
‚Ä¢ Result size < 10K rows
‚Ä¢ No errors

‚è±Ô∏è variable" }

QUERY_ERROR@{ shape: rect, label: "‚ùå Query Execution Error
Possible errors:
‚Ä¢ Timeout (> 30s)
‚Ä¢ Too many rows (> 10K)
‚Ä¢ Invalid table/column
‚Ä¢ Permission denied

Return 500 with details
Ask user to narrow question" }

FETCH_RESULTS@{ shape: rect, label: "üìä Fetch Query Results
Convert to:
‚Ä¢ List of dicts
‚Ä¢ DataFrame (pandas)
‚Ä¢ JSON serializable

Sample result:
[
{'name': 'Norte', 'count': 45},
{'name': 'Sur', 'count': 38}
]

‚è±Ô∏è ~50ms" }

%% =================================================================
%% VISUALIZATION GENERATION
%% =================================================================

CHECK_VIZ_CODE@{ shape: diamond, label: "Visualization Code Present?
LLM provided Python code?" }

SKIP_VIZ@{ shape: rect, label: "‚è≠Ô∏è Skip Visualization
Return data as table only
No chart generated" }

PREPARE_SANDBOX@{ shape: rect, label: "üèñÔ∏è Prepare Python Sandbox
Safe globals:
‚Ä¢ pd (pandas)
‚Ä¢ np (numpy)
‚Ä¢ plt (matplotlib)
‚Ä¢ sns (seaborn)
‚Ä¢ data (query results DataFrame)

Restricted:
‚Ä¢ No file I/O
‚Ä¢ No network access
‚Ä¢ No os/sys/subprocess
‚Ä¢ Limited memory

‚è±Ô∏è ~20ms" }

EXECUTE_PYTHON@{ shape: subproc, label: "üêç Execute Visualization Code
Run in sandbox:

```python
fig, ax = plt.subplots()
ax.bar(data['name'], data['count'])
ax.set_title('Mortality by Area')
plt.tight_layout()
# Auto-saved to BytesIO
```

Timeout: 10s
Output: SVG bytes

‚è±Ô∏è 100ms - 2s" }

VIZ_SUCCESS@{ shape: diamond, label: "Visualization OK?
Check:
‚Ä¢ Execution successful
‚Ä¢ SVG generated
‚Ä¢ Size < 5MB

‚è±Ô∏è ~5ms" }

VIZ_ERROR@{ shape: rect, label: "‚ö†Ô∏è Visualization Failed
Non-fatal error
Continue without chart

Log error:
'Python code execution failed:
{error_message}'

Return data only" }

ENCODE_SVG@{ shape: rect, label: "üé® Encode SVG
Convert bytes to base64
or UTF-8 string

SVG can be:
‚Ä¢ Embedded in HTML
‚Ä¢ Displayed in frontend
‚Ä¢ Downloaded

‚è±Ô∏è ~10ms" }

%% =================================================================
%% RESPONSE BUILDING
%% =================================================================

GENERATE_INSIGHTS@{ shape: rect, label: "üí° Format Insights
From LLM response:

insights = [
'Norte area has 18% higher mortality',
'Consider reviewing irrigation in Sur',
'Mortality increased 5% vs last month'
]

Add metadata:
‚Ä¢ Confidence level
‚Ä¢ Data freshness
‚Ä¢ Sample size

‚è±Ô∏è ~20ms" }

BUILD_RESPONSE@{ shape: rect, label: "üì¶ Build Response
{
'question': 'Show mortality...',
'sql_query': 'SELECT...',
'explanation': 'This query...',
'data': [...],
'visualization_svg': '<svg>...',
'insights': [...],
'metadata': {
'row_count': 2,
'execution_time_ms': 2340,
'model': 'gpt-4o',
'cached': false,
'cost_usd': 0.012
}
}

‚è±Ô∏è ~20ms" }

CACHE_RESPONSE@{ shape: rect, label: "üíæ Cache Response
Key: ai_query:hash(question)
Value: full response JSON
TTL: 3600s (1 hour)

Next identical query:
‚Ä¢ No LLM call
‚Ä¢ No DB query
‚Ä¢ Instant response

‚è±Ô∏è ~20ms" }

RETURN_RESPONSE@{ shape: rect, label: "‚úÖ Return 200 OK
Send JSON to frontend

‚è±Ô∏è Total: 2-5s
(1-3s LLM + 1-2s execution)" }

%% =================================================================
%% FRONTEND DISPLAY
%% =================================================================

FRONTEND_RENDER@{ shape: rect, label: "üñ•Ô∏è Frontend Renders Response
1. Hide loading spinner
2. Show Q&A pair:
Q: User question
A: Explanation

3. Display data:
‚Ä¢ SVG chart (if generated)
‚Ä¢ Data table

4. Show insights as cards:
üí° [Insight 1]
üí° [Insight 2]

5. Show metadata:
‚Ä¢ Rows: N
‚Ä¢ Time: Xms
‚Ä¢ SQL: <collapsible>

6. Action buttons:
‚Ä¢ Export to Excel
‚Ä¢ Refine question
‚Ä¢ Save to history

‚è±Ô∏è ~200ms rendering" }

DISPLAY_RESULTS@{ shape: stadium, label: "üéØ User Views AI Insights
Interactive features:
‚Ä¢ Click insight for details
‚Ä¢ Hover chart for values
‚Ä¢ Expand SQL query
‚Ä¢ Export data

User can:
‚Ä¢ Ask follow-up question
‚Ä¢ Modify and re-run
‚Ä¢ Share link to analysis
‚Ä¢ Download chart as PNG/SVG

History saved for future reference" }

%% =================================================================
%% CONNECTIONS
%% =================================================================

START --> INPUT_QUERY
INPUT_QUERY --> VALIDATE_INPUT

VALIDATE_INPUT -->|Invalid|INPUT_ERROR
VALIDATE_INPUT -->|Valid|SUBMIT_QUERY

SUBMIT_QUERY --> CHECK_RATE_LIMIT
CHECK_RATE_LIMIT -->|Exceeded|RATE_LIMITED
CHECK_RATE_LIMIT -->|OK|CHECK_CACHE

CHECK_CACHE -->|Hit|CACHE_HIT
CHECK_CACHE -->|Miss| PREPARE_CONTEXT

CACHE_HIT --> RETURN_RESPONSE

PREPARE_CONTEXT --> CALL_OPENAI
CALL_OPENAI --> LLM_SUCCESS

LLM_SUCCESS -->|Error|LLM_ERROR
LLM_SUCCESS -->|OK|VALIDATE_SQL

VALIDATE_SQL --> SQL_VALID
SQL_VALID -->|Unsafe|SQL_UNSAFE
SQL_VALID -->|Safe|EXECUTE_SQL

EXECUTE_SQL --> QUERY_TIMEOUT
QUERY_TIMEOUT -->|Error| QUERY_ERROR
QUERY_TIMEOUT -->|OK|FETCH_RESULTS

FETCH_RESULTS --> CHECK_VIZ_CODE
CHECK_VIZ_CODE -->|No|SKIP_VIZ
CHECK_VIZ_CODE -->|Yes|PREPARE_SANDBOX

SKIP_VIZ --> GENERATE_INSIGHTS

PREPARE_SANDBOX --> EXECUTE_PYTHON
EXECUTE_PYTHON --> VIZ_SUCCESS

VIZ_SUCCESS -->|Error|VIZ_ERROR
VIZ_SUCCESS -->|OK|ENCODE_SVG

VIZ_ERROR --> GENERATE_INSIGHTS
ENCODE_SVG --> GENERATE_INSIGHTS

GENERATE_INSIGHTS --> BUILD_RESPONSE
BUILD_RESPONSE --> CACHE_RESPONSE
CACHE_RESPONSE --> RETURN_RESPONSE

RETURN_RESPONSE --> FRONTEND_RENDER
FRONTEND_RENDER --> DISPLAY_RESULTS

%% =================================================================
%% STYLING
%% =================================================================

classDef uiStyle fill: #E3F2FD, stroke: #1976D2, stroke-width: 2px
classDef llmStyle fill: #F3E5F5, stroke: #7B1FA2, stroke-width: 2px
classDef securityStyle fill: #FFEBEE, stroke: #C62828, stroke-width: 2px
classDef dbStyle fill: #E0F2F1, stroke: #00796B, stroke-width: 2px
classDef vizStyle fill: #E8F5E9, stroke: #388E3C, stroke-width: 2px
classDef errorStyle fill: #FFE0B2, stroke: #E65100, stroke-width: 2px

class INPUT_QUERY, VALIDATE_INPUT,SUBMIT_QUERY, FRONTEND_RENDER uiStyle
class PREPARE_CONTEXT, CALL_OPENAI,LLM_SUCCESS llmStyle
class VALIDATE_SQL, SQL_VALID,CHECK_RATE_LIMIT, RATE_LIMITED securityStyle
class EXECUTE_SQL, QUERY_TIMEOUT,FETCH_RESULTS dbStyle
class CHECK_VIZ_CODE, PREPARE_SANDBOX,EXECUTE_PYTHON, VIZ_SUCCESS, ENCODE_SVG vizStyle
class INPUT_ERROR, LLM_ERROR,SQL_UNSAFE, QUERY_ERROR,VIZ_ERROR errorStyle
